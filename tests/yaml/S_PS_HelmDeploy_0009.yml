template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_PS_HelmDeploy_BuildInfo_0009
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory
      buildName: helmbuild
      buildNumber: 1

  - name: S_PS_HelmDeploy_GitRepo_0009
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation.path }}
      branches:
        include: master

  - name: S_PS_HelmDeploy_ReleaseBundle_0009
    type: ReleaseBundle
    configuration:
      sourceDistribution: s_distribution
      name: name
      version: '1'

pipelines:
  - name: S_PS_HelmDeploy_0009
    configuration:
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog/pipelines-w19cpp
            tag: 9.0.1
            registry: docker_registry
            autoPull: true
      environmentVariables:
        readOnly:
          release_name_generic: "simplehelm-generic-${run_id}"
          k8s_namespace: "pipe-master-pool"
      nodePool: win_2019
    steps:
      - name: S_PS_HelmDeploy_0009_create_build
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputResources:
            - name: S_PS_HelmDeploy_GitRepo_0009
          outputResources:
            - name: S_PS_HelmDeploy_BuildInfo_0009
        execution:
          onExecute:
            - jfrog --version
            - $json = @{key="helmgeneric";rclass="local";packageType="generic";description="This repo is a test repo used by test automation";repoLayoutRef="simple-default"} | ConvertTo-Json -Compress  | Out-File c:\myrequest.json -Encoding Ascii -Force
            - jfrog rt repo-create c:\myrequest.json
            - cd $res_S_PS_HelmDeploy_GitRepo_0009_resourcePath/tests/core/helmdeploy
            - jfrog rt u simplehelm/ "helmgeneric/" --flat=false --build-name=$JFROG_CLI_BUILD_NAME --build-number=$JFROG_CLI_BUILD_NUMBER
            - jfrog rt bce $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER
            - jfrog rt bp $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER
            - write_output S_PS_HelmDeploy_BuildInfo_0009 buildName=$JFROG_CLI_BUILD_NAME buildNumber=$JFROG_CLI_BUILD_NUMBER
          onFailure:
            - jfrog rt repo-delete helmgeneric --quiet

      - name: Create_Bundle
        type: CreateReleaseBundle
        configuration:
          integrations:
            - name: s_artifactory
          releaseBundleName: S_PS_HelmDeploy_BuildInfo_0009_bundle
          releaseBundleVersion: ${run_id}
          dryRun: false
          sign: true
          inputResources:
            - name: S_PS_HelmDeploy_BuildInfo_0009
          outputResources:
            - name: S_PS_HelmDeploy_ReleaseBundle_0009
        execution:
          onFailure:
            - jfrog rt repo-delete helmgeneric --quiet

      - name: deploy_helm_chart_from_generic_repo
        type: HelmDeploy
        configuration:
          integrations:
            - name: s_artifactory
            - name: s_kubernetes
          inputResources:
            - name: S_PS_HelmDeploy_ReleaseBundle_0009
          helmVersion: 3
          releaseName: ${release_name_generic}
          chartPath: helmgeneric/simplehelm
          flags: "--force --wait --timeout 900s --set image.repository=trriplejay/simplehelm --set image.tag=latest"
          valueFilePaths:
            - values.yaml
          lint: true
          lintFlags: "--strict"
          test: true
        execution:
          onComplete:
            - Write-Output "Deleting distribution..."
            - |
              $distributionUrl = $res_S_PS_HelmDeploy_ReleaseBundle_0009_sourceDistribution_url
              $encoded_auth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${res_S_PS_HelmDeploy_ReleaseBundle_0009_sourceDistribution_user}:${res_S_PS_HelmDeploy_ReleaseBundle_0009_sourceDistribution_apikey}"))
              $releaseBundleName = (find_resource_variable "S_PS_HelmDeploy_ReleaseBundle_0009" name)
              $releaseBundleVersion = (find_resource_variable "S_PS_HelmDeploy_ReleaseBundle_0009" version)
              Write-Output "releaseBundleName = $releaseBundleName"
              Write-Output "releaseBundleVersion = $releaseBundleVersion"
              check_no_verify_ssl
              $headers = @{'Authorization' = "Basic $encoded_auth"}
              $Response = Invoke-WebRequest "${distributionUrl}/api/v1/release_bundle/$releaseBundleName/$releaseBundleVersion" -Method Delete -Headers $headers -TimeoutSec 60 -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
              $statusCode = ""
              try {
                $statusCode = $Response.StatusCode
              }
              catch {
                $statusCode = $_.Exception.Response.StatusCode.value__
              }
              if ($statusCode -eq 204) {
                Write-Output "Deleted release bundle ${releaseBundleName}/${releaseBundleVersion} successfully"
              } else {
                Write-Output "Distribution returned $statusCode"
              }
            - try { jfrog rt repo-delete helmgeneric --quiet } catch {}
            - try { helm3 delete simplehelm-generic-$run_id --namespace $k8s_namespace } catch {}
